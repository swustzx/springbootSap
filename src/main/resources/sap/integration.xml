<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:file="http://www.springframework.org/schema/integration/file"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:sapidoc="http://www.springframework.org/schema/integration/sap/idoc"
	xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:int-stream="http://www.springframework.org/schema/integration/stream"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd http://www.springframework.org/schema/integration/sap/idoc http://www.springframework.org/schema/integration/sap/idoc/spring-integration-sap-idoc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd">
	<bean class="com.fl.integration.sap.idoc.inbound.IDocServerSource" id="iDocServerSource">
		<constructor-arg>
			<bean class="com.fl.integration.sap.idoc.listener.config.ContainerProperties">
			</bean>
		</constructor-arg>
		<property name="jCoIDocHandlerFactory" ref="iDocHandlerFactory"></property>
	</bean>
	<sapidoc:message-driven-channel-adapter id="sapIdoc"
		listener-container="iDocServerSource"></sapidoc:message-driven-channel-adapter>
	<bean class="com.fl.integration.sap.idoc.inbound.IDocHandlerFactory" id="iDocHandlerFactory"
		lazy-init="false" scope="prototype">
		<property name="handler" ref="execIDocHandler"></property>
	</bean>
	<bean class="com.fl.integration.sap.idoc.inbound.exec.ExecIDocHandler" id="execIDocHandler">
	</bean>
	<sapidoc:idoc-to-json-transformer id="idoc2json" input-channel="sapIdoc"
		output-channel="toRabbit"></sapidoc:idoc-to-json-transformer>
	<!-- From Idoc To RabbitMQ -->

	<int:channel id="toRabbit"/>

	<int-amqp:outbound-channel-adapter
		amqp-template="amqpTemplate" channel="toRabbit"
		confirm-ack-channel="good"
		confirm-correlation-expression="payload"
		confirm-nack-channel="errors"
		exchange-name-expression="payload.toLowerCase() == 'nack' ? 'badExchange' : 'si.idoc.exchange'"
		return-channel="returns"
		routing-key-expression="payload.toLowerCase() == 'fail' ? 'badKey' : 'si.idoc.binding'"/>

	<!--Confirms are correlated with the entire payload; for rich objects, we might just use 'payload.invoiceId' -->

	<int:transformer expression="payload + ' sent ok'" input-channel="good" output-channel="stdOut"/>

	<int:transformer expression="payload + ' send failed (nack)'" input-channel="errors" output-channel="stdErr"/>

	<int:transformer expression="payload + ' returned:' + headers['amqp_returnReplyText']" input-channel="returns"
		output-channel="stdErr"/>

	<int-stream:stdout-channel-adapter append-newline="true"
		id="stdOut"/>

	<int-stream:stderr-channel-adapter append-newline="true"
		id="stdErr"/>

	<int:logging-channel-adapter id="loggingChannel" level="INFO" log-full-message="true"
		logger-name="tapInbound"/>
	<!-- Infrastructure -->

	<rabbit:connection-factory host="${rabbit.connection-factory.host}" id="connectionFactory"
		password="${rabbit.connection-factory.password}"
		publisher-confirms="true" publisher-returns="true" username="${rabbit.connection-factory.username}"/>

	<rabbit:template connection-factory="connectionFactory" id="amqpTemplate" mandatory="true"/> <!-- for nacks -->

	<rabbit:admin connection-factory="connectionFactory"/>

	<rabbit:queue name="si.idoc.queue"/>

	<rabbit:direct-exchange name="si.idoc.exchange">
		<rabbit:bindings>
			<rabbit:binding key="si.idoc.binding" queue="si.idoc.queue"/>
		</rabbit:bindings>
	</rabbit:direct-exchange>

	<bean class="com.fl.integration.sap.rfc.inbound.RfcClientSource" id="rfcClientSource">

	</bean>

	<!-- 声明消息转换器为SimpleMessageConverter -->
	<bean class="org.springframework.amqp.support.converter.SimpleMessageConverter"
		id="messageConverter">
	</bean>
	<!-- 监听生产者发送的消息开始 -->
	<!-- 用于接收消息的处理类 -->
	<bean class="com.fl.integration.sap.rfc.inbound.RfcMessageDrivenChannelAdapter"
		id="rfcHandler">
		<property name="rfcClientSource" ref="rfcClientSource"></property>
		<property name="rabbitTemplate" ref="amqpTemplate"></property>
	</bean>
	<!-- 用于消息的监听的代理类MessageListenerAdapter -->
	<bean class="org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter"
		id="rfcAdapter">
		<constructor-arg ref="rfcHandler"/>
		<property name="defaultListenerMethod" value="handleMessage"></property>
		<property name="messageConverter" ref="messageConverter"></property>
	</bean>
	<!-- 用于消息的监听的容器类SimpleMessageListenerContainer，对于queueName的值一定要与定义的Queue的值相同 -->
	<bean class="org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer"
		id="listenerContainer">
		<property name="queueNames" value="si.idoc.queue"></property>
		<property name="connectionFactory" ref="connectionFactory"></property>
		<property name="messageListener" ref="rfcAdapter"></property>
		<property name="concurrentConsumers" value="3"></property>
	</bean>
	<!-- 监听生产者发送的消息结束 -->


	<!--RFC发送到队列-->
	<!--&lt;!&ndash; 声明Queue并设定Queue的名称 &ndash;&gt;-->
	<bean class="org.springframework.amqp.core.Queue"
		id="si.rfc.queue">
		<constructor-arg value="si.rfc.queue"></constructor-arg>
	</bean>

	<rabbit:direct-exchange name="si.rfc.exchange">
		<rabbit:bindings>
			<rabbit:binding key="si.rfc.binding" queue="si.rfc.queue"/>
		</rabbit:bindings>
	</rabbit:direct-exchange>
</beans>
